一、基础架构层
1. 核心基础设施
数学子系统：

Vector2 提供完整的2D向量运算（加减乘除、点积、标准化等）

Size 结构体封装宽高数据

maths 命名空间包含常用数学函数（角度/弧度转换、插值计算等）

时间管理：

Clock 类实现精确帧率控制（支持VSync和动态FPS调整）

Timer 提供可配置的计时器（支持单次/循环触发模式）

时间缩放系统（time_scale）实现全局慢动作/加速效果

异常处理：

custom_runtime_error 分类错误系统（标题+详细信息）

关键操作的前置条件检查（如空指针、资源存在性验证）

二、渲染架构层
1. 摄像机系统
坐标系管理：

世界坐标 ↔ 屏幕坐标自动转换

动态缩放支持（zoom factor）

跟随模式：

静态跟随（Static_Follow）

平滑插值跟随（Smooth_Follow）

轴向锁定模式（Only_X/Only_Y）

特效系统：

屏幕抖动（shake）效果

基于Timer的精确特效时长控制

2. 图形绘制
基本图元：

空心/实心圆形绘制

矩形绘制（线框/填充）

线段绘制

高级特性：

纹理旋转和翻转

基于摄像机的自动缩放渲染

三、游戏对象层
1. 精灵系统
Sprite基类：

定义位置/速度等基础属性

抽象接口（update/render/input）

可选的碰撞体附着（CollisionBox）

动画系统：

序列帧动画支持

播放控制（播放/暂停/重置）

帧事件回调（on_finished）

2. 碰撞系统
碰撞分层：

6种预设层级（Player/Enemy等）

位掩码管理碰撞关系

检测机制：

AABB（轴对齐包围盒）检测

分层过滤优化

碰撞回调系统

四、资源管理层
1. 资源管理
统一加载：

自动识别资源类型（纹理/音频/字体）

递归目录扫描加载

生命周期：

引用计数管理

自动释放机制

调试支持：

资源清单输出

错误资源追踪

五、场景管理层
1. 场景状态机
生命周期：

on_enter：初始化逻辑

on_update：游戏逻辑更新

on_render：渲染管线

on_exit：清理逻辑

对象管理：

精灵池（sprite_pool）统一管理

类型安全访问（模板方法）

2. 状态控制系统
动画控制器：

动画片段管理

过渡控制

行为状态机：

状态节点（StateNode）基类

状态注册和切换

分层状态管理
